package netdb.graph.opts.framework;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;

import netdb.graph.unit.EdgesCollection;

import com.tinkerpop.blueprints.Direction;
import com.tinkerpop.blueprints.Edge;
import com.tinkerpop.blueprints.Vertex;
/**
 * 
 * @author arvin
 * Walker : record all nodes and edges it walks by.
 */
public class Walker {
  private LinkedList<Vertex> visitedNodes;
  private HashMap<Integer, LinkedList<Vertex>> foundPath;
  private LinkedList<Edge> visitedEdges;
  private HashMap<Vertex,ArrayList<Edge>> adjacentEdgeList;
  private int nth_path;
  
  public Walker() {
	  visitedNodes = new LinkedList<Vertex>();
	  visitedEdges = new LinkedList<Edge>();
	  foundPath = new HashMap<Integer, LinkedList<Vertex>>();
	  nth_path = 1;
  }
  
  public void addNode(Vertex v, boolean foundTargetOrNot) {
	  if(foundTargetOrNot){
		  //record new path
		  nth_path = nth_path + 1;
		  visitedNodes = new LinkedList<Vertex>();
		  visitedNodes.add(v);
		  adjacentEdgeList.put(v, (ArrayList<Edge>) EdgesCollection.convert(v.getEdges(Direction.BOTH, "edge labels")));
		  foundPath.put(nth_path, visitedNodes);
	  }
	  else if(!foundTargetOrNot){
		  visitedNodes.add(v);
		  adjacentEdgeList.put(v, (ArrayList<Edge>) EdgesCollection.convert(v.getEdges(Direction.BOTH, "edge labels")));
		  foundPath.put(nth_path, visitedNodes);
	  }
  }
  
  public void addEdge(Edge e) {
	  visitedEdges.add(e);
	  
  }
  public ArrayList<Edge> getEdgeList(){
	  
	  return null;
  }
  
  public Vertex getLeastNode() {
	  return visitedNodes.getLast();
  }
  
  public String toString() {
	  StringBuffer strBuf = new StringBuffer();
	  Iterator<Vertex> vptr = visitedNodes.iterator();
	  while(vptr.hasNext()){
		  strBuf.append(vptr.next());
		  if(vptr.hasNext()){
			  strBuf.append(" -> ");
		  }
		  else{
			  strBuf.append("");
		  }
	  }
	  return strBuf.toString();
  }
  
  public HashMap<Integer, LinkedList<Vertex>> getAllPath(){
	  //return ALL Path
	  return foundPath;
  }
  
  public LinkedList<Vertex> getPath(int i){
	  //return ith Path(all Vertex in the path)
	 return foundPath.get(i); 
  }

  public double getPathWeight() {
	  //not finished yet
	  double weight = 0;
	  Iterator<Edge> eptr = visitedEdges.iterator();
	  while(eptr.hasNext()){
		  weight += (double)eptr.next().getProperty("weight");
	  }
	  return weight;
  }
}
