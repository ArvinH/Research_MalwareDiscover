package netdb.graph.alg;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.TreeSet;

import netdb.graph.opts.framework.Walker;

import com.tinkerpop.blueprints.Direction;
import com.tinkerpop.blueprints.Edge;
import com.tinkerpop.blueprints.Vertex;
/**
 * 
 * @author arvin
 * KNN Search Strategy
 */
public class KNNSearch implements IGraphSearchStrategy{
	private TreeSet<Vertex> knnCandidate;
    private IGraphSearchVisitor Ivisitor;
    private ArrayList<Edge> EdgeList;
    private RandomProb RProb;
    private boolean foundTargetOrNot = false;
    private int Stepsthreshold = 0;
    private int K;
    private boolean skipOrNot;
    private Vertex returnVertex;
    private BoundaryProcessor boundaryProcessor;
    public KNNSearch(int Stepsthreshold, int k){
    	knnCandidate = new TreeSet<Vertex>();
    	this.Stepsthreshold = Stepsthreshold;
    	EdgeList = new ArrayList<Edge>();
    	RProb = new RandomProb();
    	boundaryProcessor = new BoundaryProcessor(0.8);
    	this.K = k;
    	skipOrNot = false;
    }
    
    

	@Override
	public Walker query(Vertex vertex, Walker walker) {
		
		// for root
		foundTargetOrNot = Ivisitor.visitVertex(vertex, null, walker);
		setAdjVertexAndEdges(vertex);
		
		while(foundTargetOrNot && (knnCandidate.size() < this.K)){
			vertex = getNextVisitVertex(vertex, walker);
			setAdjVertexAndEdges(vertex);
		}
		
		return walker;
	}
	
	
	
    
/**
 *     calculate the probability of walking to or not walking to v's neighbors and return the neighbor which should be walked
 */
	public Vertex getNextVisitVertex(Vertex lastV, Walker walker) {

		
		if(EdgeList.size() != 0){
			//EdgeList = walker.getEdgeList();
			Iterator<Edge> checkAttachedTarget;
			Iterator<Edge> edgePtr = EdgeList.iterator();
			Edge e = null;
			
			//find the most prob to walk
			HashMap<Edge, Double> weightMap = new HashMap<Edge, Double>();
			while (edgePtr.hasNext()){
				e = edgePtr.next();
				weightMap.put(e, (Double)e.getProperty("weight"));
				// here to decide which edge should be walked
			}
				e = RProb.calculate(weightMap);
				e.setProperty("walked", true);
				Vertex vIn = e.getVertex(Direction.IN);
				Vertex vOut = e.getVertex(Direction.OUT);
				if(lastV.equals(vIn)){
					foundTargetOrNot = Ivisitor.visitVertex(vOut, e, walker);
					vOut.setProperty("walked", true);
					returnVertex = vOut;
					//check if meet the boundary, meet, then put all attached target into knnCandidate
					// and set foundTargetOrNot to true
					if(vOut.getProperty("LandMark")){
						foundTargetOrNot = true;
						skipOrNot = true;
						checkAttachedTarget = vOut.getEdges(Direction.OUT, "attachedTarget").iterator();
						while(checkAttachedTarget.hasNext()){
							Edge attachedTargetedge = checkAttachedTarget.next();
							//add shortcut target into knnCandidate
							knnCandidate.add(attachedTargetedge.getVertex(Direction.OUT));
							//then update boundary again
							boundaryProcessor.setTarget(attachedTargetedge.getVertex(Direction.OUT));
							boundaryProcessor.setupBoundary(attachedTargetedge.getVertex(Direction.OUT), 1);
							//walker update and count 
							Ivisitor.pathWeightUpdate(walker);
							boundaryProcessor.updateWeightbetweenTargetandBoundary(vOut,attachedTargetedge.getVertex(Direction.OUT));

						}
					}
					//walker update and count 
					Ivisitor.pathWeightUpdate(walker);
				}
				else if(lastV.equals(vOut)){
					foundTargetOrNot = Ivisitor.visitVertex(vIn, e, walker);
					vIn.setProperty("walked", true);
					returnVertex = vIn;
					
					//check if meet the boundary. If meet, then put all attached target into knnCandidate
					// and set foundTargetOrNot to true
					if(vIn.getProperty("LandMark")){
						foundTargetOrNot = true;
						skipOrNot = true;
						checkAttachedTarget = vIn.getEdges(Direction.OUT, "attachedTarget").iterator();
						while(checkAttachedTarget.hasNext()){
							Edge attachedTargetedge = checkAttachedTarget.next();
							//add shortcut target into knnCandidate
							knnCandidate.add(attachedTargetedge.getVertex(Direction.OUT));
							//then update boundary again
							boundaryProcessor.setTarget(attachedTargetedge.getVertex(Direction.OUT));
							boundaryProcessor.setupBoundary(attachedTargetedge.getVertex(Direction.OUT), 1);
							//walker update and count 
							boundaryProcessor.updateWeightbetweenTargetandBoundary(vIn,attachedTargetedge.getVertex(Direction.OUT));
						}
						//walker update and count 
						Ivisitor.pathWeightUpdate(walker);
					}
				}
				
				//check if visitor found the target or not, then keep finding(go back to find)
				//skipOrNot to control the found Target is found by skip or not
				if(foundTargetOrNot && !skipOrNot){ 
					
					knnCandidate.add(walker.getLeastNode());
					boundaryProcessor.setTarget(walker.getLeastNode());
					boundaryProcessor.setupBoundary(walker.getLeastNode(), 1);
					
					//here to record every path of target to it's boundary node?
					
					
					return walker.getRoot();
				}
				else if(!foundTargetOrNot && !skipOrNot){
				//keep finding
					return returnVertex;
				}
		}
		else if(EdgeList.size() == 0){
			
			return returnVertex;
			
		}
	
		
		return null;
	}

	
	
	
	public int getStepsThreshold(){
		return this.Stepsthreshold;
	}
	public void accept(IGraphSearchVisitor vis) {
		Ivisitor = vis;
		
	}

	@Override
	public boolean successOrNot() {
		// TODO Auto-generated method stub
		if(knnCandidate.size() == this.K){
			return true;
		}
		else{
			return false;
		}
	}
	private void setAdjVertexAndEdges(Vertex lastV){
		//first clean all elements in previous list
		EdgeList.clear();
		// collect all adjacent edges
		Iterator<Edge> edgeItr = lastV.getEdges(Direction.BOTH, "edge labels").iterator();
		Edge adjEdge;
		while(edgeItr.hasNext()){
			adjEdge = edgeItr.next();
			if(!(boolean)adjEdge.getProperty("walked")){
				EdgeList.add(adjEdge);
			}
		}
		
	}




}
