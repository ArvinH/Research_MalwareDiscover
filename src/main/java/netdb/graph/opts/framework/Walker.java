package netdb.graph.opts.framework;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.TreeMap;

import com.tinkerpop.blueprints.Edge;
import com.tinkerpop.blueprints.Vertex;
/**
 * 
 * @author arvin
 * Walker : record all nodes and edges it walks by.
 */
public class Walker {
  private LinkedList<Vertex> visitedNodes;
  private TreeMap<Integer, LinkedList<Vertex>> foundPathvertex;
  private TreeMap<Integer, LinkedList<Edge>> foundPathedge;
  private LinkedList<Edge> visitedEdges;
  private int nth_path;
  
  public Walker() {
	  visitedNodes = new LinkedList<Vertex>();
	  visitedEdges = new LinkedList<Edge>();
	  foundPathvertex = new TreeMap<Integer, LinkedList<Vertex>>();
	  foundPathedge = new TreeMap<Integer, LinkedList<Edge>>();
	  nth_path = 0;
  }
  
  public void addNode(Vertex v, boolean foundTargetOrNot) {
	  if(foundTargetOrNot){
		  //record new path
		  nth_path = nth_path + 1;
		  visitedNodes = new LinkedList<Vertex>();
		  visitedNodes.add(v);
		  foundPathvertex.put(nth_path, visitedNodes);
	  }
	  else if(!foundTargetOrNot){
		  visitedNodes.add(v);
		  foundPathvertex.put(nth_path, visitedNodes);
	  }
  }
  
  public void addEdge(Edge e, boolean foundTargetOrNot) {
	  if(foundTargetOrNot){
		  //record new path
		  nth_path = nth_path + 1;
		  visitedEdges = new LinkedList<Edge>();
		  visitedEdges.add(e);
		  foundPathedge.put(nth_path, visitedEdges);
	  }
	  else if(!foundTargetOrNot){
		  visitedEdges.add(e);
		  foundPathedge.put(nth_path, visitedEdges);
	  }
	  
  }
  
  public Vertex getLeastNode() {
	  return visitedNodes.getLast();
  }
  
  public Vertex getRoot(){
	  return visitedNodes.getFirst();
  }
  
  public ArrayList<Vertex> getFoundTargets(){
	  
	  return null;
  }
  
  public TreeMap<Integer, LinkedList<Vertex>> getAllPath(){
	  //return ALL Path
	  return foundPathvertex;
  }
  
  public LinkedList<Edge> getLastPath(){
	  //return last Path(all edge in the path)
	 return foundPathedge.get(foundPathedge.lastKey());
  }
  public LinkedList<Edge> getPath(int i){
	  //return ith Path(all edge in the path)
	 return foundPathedge.get(i);
  }

  public double getPathWeight() {
	  //not finished yet
	  double weight = 0;
	  Iterator<Edge> eptr = visitedEdges.iterator();
	  while(eptr.hasNext()){
		  weight += (double)eptr.next().getProperty("weight");
	  }
	  return weight;
  }
}
