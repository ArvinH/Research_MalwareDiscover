import sys
import json
import postgresql

class Node:
    def __init__(self, nodeID, depth, subgraphID):
        self.nodeID = nodeID
        self.depth = depth
        self.subgraphID = subgraphID

class Partition:
    def __init__(self, depth):
        self.partID = 0
        self.depth = int(depth)
        self.nodeDict = dict()
        self.targetList = list()
        self.expansion_queue = list()
        self.connect_db()

    def connect_db(self):
        with open('db_setting.json') as db_file:
            db_setting = json.load(db_file)
        self.db = postgresql.open(user = db_setting['user'],
                                  password = db_setting['password'],
                                  host = db_setting['host'],
                                  database = db_setting['database'],
                                  port = db_setting['port'])

    def readTargetFile(self, targetFile):
        with open(targetFile, 'r') as myfile:
            for line in myfile:
                targetRow = line.strip().split('\t')
                self.targetList.append(targetRow[0])

    def add_node_to_dict(self, nodeID, depth, subgraphID):
        node = Node(nodeID, depth, subgraphID)
        self.nodeDict[nodeID] = node

    def get_neighbor(self, node):
        get_neighbor_sql = self.db.prepare('select neighbor from neighborMap where nodeID = $1')
        with self.db.xact():
            neighbor_str = get_neighbor_sql(node.nodeID)[0][0]
        return neighbor_str.split(',')


    def run(self, targetFile):
        self.readTargetFile(targetFile)

        for target_node in self.targetList:
            self.add_node_to_dict(target_node, 0, self.partID)
            self.expansion_queue.append(self.nodeDict[target_node])
            self.partID += 1

        while True:
            if not self.expansion_queue:
                break

            for node in self.expansion_queue:
                neighborList = self.get_neighbor(node)
                for neighbor in neighborList:
                    is_partition = self.nodeDict.get(neighbor, '')
                    if is_partition:
                        continue

                    if node.depth >= self.depth:
                        continue
                    self.add_node_to_dict(neighbor, node.depth+1, node.subgraphID)
                    self.expansion_queue.append(self.nodeDict[neighbor])
                self.expansion_queue.remove(node)
        self.db.close()

    def print_result(self):
        print ('id\tdepth\tsubgraph')
        for nodeID in self.nodeDict.keys():
            print (nodeID + '\t' + str(self.nodeDict[nodeID].depth) + '\t' + str(self.nodeDict[nodeID].subgraphID))

if __name__ == '__main__':
    targetFile = sys.argv[1]
    depth = sys.argv[2]
    partition = Partition(depth)
    partition.run(targetFile)
    partition.print_result()
