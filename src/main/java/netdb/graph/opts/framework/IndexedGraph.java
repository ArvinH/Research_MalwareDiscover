package netdb.graph.opts.framework;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import netdb.graph.alg.IGraphSearchStrategy;
import netdb.graph.unit.CacheManager;

import com.tinkerpop.blueprints.Vertex;
import com.tinkerpop.blueprints.impls.neo4j.Neo4jGraph;

import edu.uci.ics.jung.graph.event.GraphEvent.Type;
/**
 * 
 * @author arvin
 * Record the Graphs which are loaded in memory
 */
public class IndexedGraph {
  private CacheManager blockCache = null;
  private Vertex root=null;
  private Neo4jGraph indexedGraph;
  private int queryThreshold;
  private int queryThresholdCounter;
  private boolean TargetOrNot;
  
  public IndexedGraph(String defaultGraph){
	 blockCache = new CacheManager();
	 indexedGraph = new Neo4jGraph(defaultGraph);
	 queryThreshold = 0;
	 queryThresholdCounter = 0;
  }
  public ArrayList<Walker> query(ArrayList<TargetVertex> targetV, IGraphSearchStrategy queryStrategy, ArrayList<String> queryNodeList) {
	  ArrayList<Walker> walkerList = new ArrayList<Walker>();
	  Walker walker = null;
	  for(int i=0;i < queryNodeList.size(); i++ ){
		  walker = new Walker();
		  walkerList.add(walker);
	  }
	  GBlock gBlock = new GBlock(indexedGraph);
	  blockCache.putCache(gBlock);
	  Iterator<String> queryIterator = queryNodeList.iterator();
	  Iterator<Walker> walkerIterator = walkerList.iterator();
	  while(queryIterator.hasNext() && walkerIterator.hasNext()){
		  root = indexedGraph.getVertex(queryIterator.next());
		  walker  = walkerIterator.next();
		  queryThreshold = queryStrategy.getStepsThreshold();
		  if (queryThresholdCounter <= queryThreshold){
			  Vertex nextV = queryStrategy.getNextVisitVertex(root, walker);
			  queryThresholdCounter = queryThresholdCounter + 1;
			  while (null != nextV) {
				  /**
				   * check the nextV is the target or not
				   */
				 
				  // if not found target yet
				  if(!queryStrategy.successOrNot()){
					  nextV = queryStrategy.getNextVisitVertex(nextV, walker);
					  queryThresholdCounter = queryThresholdCounter + 1;
				  }
				  else{
					  
				  }
			  }
		  }
	  }
	  return walkerList;
  }
  
}
