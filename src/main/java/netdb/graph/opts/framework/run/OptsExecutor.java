package netdb.graph.opts.framework.run;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Properties;

import netdb.graph.alg.AccumulateVisitor;
import netdb.graph.alg.KNNSearch;
import netdb.graph.opts.framework.IndexedGraph;
import netdb.graph.opts.framework.OptsExperimentSet;
import netdb.graph.opts.framework.TargetVertex;
import netdb.graph.opts.framework.Walker;

import com.tinkerpop.blueprints.Vertex;

public class OptsExecutor {
	public OptsExecutor() {
    	Properties prop = new Properties();
    	try {
          prop.load(new FileInputStream("config.properties"));
          
          String[] GraphPartIDListString = prop.getProperty("GRAPH_PARTID").split(",");
          OptsExperimentSet.GRAPH_PARTID = GraphPartIDListString;
          
          String[] cachedGraphIDListString = prop.getProperty("CACHE_GRAPHID").split(",");
          OptsExperimentSet.CACHED_GRAPHID = cachedGraphIDListString;
          
          String TargetType = prop.getProperty("Target_Type");
          OptsExperimentSet.TARGET_TYPE = TargetType;
          
    	} catch (IOException e) {
    		
    	}	
	}
	public void run(ArrayList<String> queryNode){
		IndexedGraph iGraph = new IndexedGraph("/Volumes/MacintoshHDD/Users/arvin/Documents/neo4j-community-1.9.5/data/graph.db","0");
		KNNSearch knn = new KNNSearch(20,3);
		AccumulateVisitor AVisitor = new AccumulateVisitor(OptsExperimentSet.TARGET_TYPE, 0.6, 5000);
		knn.accept(AVisitor);
		iGraph.Test();
	}
	public static void main(String[] agrs) {
		OptsExecutor optsExec = new OptsExecutor();
		ArrayList<String> queryNodeList = new ArrayList<String>();
		queryNodeList.add(" ");
		optsExec.run(queryNodeList);
	}
}
