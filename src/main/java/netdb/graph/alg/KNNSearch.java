package netdb.graph.alg;

import java.util.List;
import java.util.TreeSet;

import netdb.graph.opts.framework.Target;
import netdb.graph.opts.framework.Walker;

import com.tinkerpop.blueprints.Direction;
import com.tinkerpop.blueprints.Edge;
import com.tinkerpop.blueprints.Vertex;

public class KNNSearch implements IGraphSearchStrategy{
	private TreeSet<Target> knnCandidate;
    private IGraphSearchVisitor Ivisitor;
    private boolean hasNextNode = false;
    
    public KNNSearch(){
    	knnCandidate = new TreeSet<Target>();
    }
    
	public List<Vertex> getNextVisitVertex(Vertex lastV, Walker walker) {
		// calculate the probability of walking to or not walking to v's neighbors
		// pick one v from lastV
		Edge e = lastV.getEdges(null, "").iterator().next();
		Double weight = e.getProperty("weight");
		
		if (null != e.getVertex(Direction.OUT)){
			Vertex v = e.getVertex(Direction.OUT);
			Ivisitor.visitVertex(v, null, walker);
			hasNextNode = true;
		}
		if (null != e.getVertex(Direction.IN)){
			Vertex v = e.getVertex(Direction.IN);
			Ivisitor.visitVertex(v, null, walker);
			hasNextNode = true;
		}
		if (!hasNextNode){  
			// no next node
			// return null?
			
		}
		
		return null;
	}

	public void accept(IGraphSearchVisitor vis) {
		Ivisitor = vis;
		
	}


}
