package netdb.graph.opts.framework.run;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;

import com.tinkerpop.blueprints.Direction;
import com.tinkerpop.blueprints.Vertex;
import com.tinkerpop.blueprints.impls.neo4j.Neo4jGraph;

public class CVEBorder {
	//private String BorderID = "RealSingle-newWeight";
	private String BorderID = "RealSingle-newWeightFunc";
	private Neo4jGraph indexedGraph = null;
	public CVEBorder(){
		//String prefix = "home/arvin/neo4j-community-1.9.7/data/";
		  //String prefix = "/Volumes/MacintoshHDD/Users/arvin/Documents/neo4j-community-1.9.7/data/";
		  String prefix = "C:\\Program Files\\Neo4j Community\\";
		  HashMap<String, String> config = new HashMap<String, String>();
		  config.put("online_backup_enabled", "false"); 
		  config.put("cache_type", "soft");
		  this.indexedGraph = new Neo4jGraph(prefix+"graph-"+BorderID+".db", config);
	}
	public void shutdownGraph(){
		this.indexedGraph.shutdown();
	}
	public void start(String CVEID, int depth){
		Iterator<Vertex> tempVertex = this.indexedGraph.getVertices("nodeID", CVEID).iterator();
		Vertex returnVertex = null;
		while(tempVertex.hasNext()){
			returnVertex = tempVertex.next();
		}
		if(returnVertex == null){
			System.out.println(CVEID + " not found");
		}
		explore(returnVertex,0,depth,CVEID);
	}
	public void explore(Vertex v, int currentDepth, int depth, String CVEID){
		Iterator<Vertex> tempV = null;
		if (currentDepth < depth){
			tempV = v.getVertices(Direction.BOTH, "edge_label").iterator();
			while(tempV.hasNext()){
				explore(tempV.next(),currentDepth+1,depth,CVEID);
			}
		}
		else{
			if(!"1".equals(v.getProperty("type"))){
				v.setProperty("target_border", CVEID);
				System.out.println(v.getProperty("nodeID")+","+v.getProperty("target_border"));
			}
		}
		
	}
	public void textResult(){
		Vertex v = this.indexedGraph.getVertex("23952");
		System.out.println(v.getProperty("target_border"));
	}
	
	public static void main(String[] agrs) {
		CVEBorder cveborder = new CVEBorder();
		
		String prefixfileName = "C:\\Program Files\\Neo4j Community\\ResearchReal_Query\\";
		String fileName = prefixfileName + "minitargetList.txt";
		try {
			FileReader fr = new FileReader(fileName);
			BufferedReader br = new BufferedReader(fr);
			String line, linearray[];
			Date startTime = Calendar.getInstance().getTime();
			while((line = br.readLine())!=null){
				// split line to get cve terms
				linearray = line.split("\t");
				cveborder.start(linearray[0], 3);
					
			}
			Date endTime = Calendar.getInstance().getTime();
			long diff = (endTime.getTime() - startTime.getTime()) / 1000;
			System.out.println("Total time: "+diff);
			br.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}catch (IOException e) {
			e.printStackTrace();
		}
		
		cveborder.shutdownGraph();
	}
}
