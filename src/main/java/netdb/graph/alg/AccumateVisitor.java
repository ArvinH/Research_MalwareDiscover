package netdb.graph.alg;

import java.util.ArrayList;
import java.util.Iterator;

import netdb.graph.opts.framework.TargetVertex;
import netdb.graph.opts.framework.Walker;

import com.tinkerpop.blueprints.Edge;
import com.tinkerpop.blueprints.Vertex;
/**
 * 
 * @author arvin
 * first:
 * this visitor is used to insert all visited Vertex and edges into walker, 
 * and also used to update the weight on the whole path that walker pass by.
 * 
 * Second:
 * check the vertex it visited is target or not
 */
public class AccumateVisitor implements IGraphSearchVisitor {
    private boolean targetOrNot;
    private ArrayList<TargetVertex> targetList;
    
    public AccumateVisitor(ArrayList<TargetVertex> targetList){
    	this.targetList = targetList;
    	this.targetOrNot = false;
    }
    
	public void visitVertex(Vertex v,Edge impactedEdge, Walker walker) {
		double newWeight = impactedEdge.getProperty("weight");
		newWeight = newWeight + 1;
		impactedEdge.setProperty("weight",newWeight);
		walker.addNode(v);
		walker.addEdge(impactedEdge);
		/**
		 * check the nextV is the target or not
		 */
		targetOrNot = targetCompare(v,this.targetList);
		if(targetOrNot){
			
		}
		
	}
	
	public boolean targetCompare(Vertex v, ArrayList<TargetVertex> t){
	  	boolean compareResult = false;
	  	Iterator<TargetVertex> targetPtr = t.iterator();
	  	while(targetPtr.hasNext()){
	  		String targetType = (String)targetPtr.next().getProperty("type");
	  		if (targetType.equals(v.getProperty("type"))){
	  			compareResult = true;
	  		}
	  	} 	
	  	
	  return compareResult; 
  }
	


}
