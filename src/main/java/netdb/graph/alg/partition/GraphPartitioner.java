package netdb.graph.alg.partition;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;

class Node{
	private String nodeID;
	private HashSet<Node> Neighbors;
	public Node(String nodeID){
		this.Neighbors = new HashSet<Node>();
		this.nodeID = nodeID;
	}
	
	public String getID(){
		return this.nodeID;
	}
	
	public void addNeighbors(Node neighbor){
		this.Neighbors.add(neighbor);
	}
	
	public HashSet<Node> getNeighbors(){
		return this.Neighbors;
	}
}

class Edge{
	private String node1;
	private String node2;
	public Edge(String node1ID, String node2ID){
		this.node1 = node1ID;
		this.node2 = node2ID;
	}
	
	public String containNode(Node node){
		if( this.node1.equals(node.getID()) ){
			return this.node2;
		}
		else if ( this.node2.equals(node.getID()) ){
			return this.node1;
		}
		else{
			return null;
		}	
	}
}

public class GraphPartitioner {
	
  public void buildPartition(String nodeFilepath, String edgeFilepath, int depth) {
	  try {
		  
		  System.out.println("----------------start to load files-----------------");
		  Date start = Calendar.getInstance().getTime();
			ArrayList<Node> nodeList = new ArrayList<Node>();
			ArrayList<String> nodeIDList = new ArrayList<String>();
		  	ArrayList<Edge> edgeList = new ArrayList<Edge>();
		  	FileWriter partFile;
		  	BufferedWriter partFilebr = null;
			FileReader nodefr = new FileReader(nodeFilepath);
			FileReader edgefr = new FileReader(edgeFilepath);
			BufferedReader nodebr = new BufferedReader(nodefr);
			BufferedReader edgebr = new BufferedReader(edgefr);
			String line;
			while((line = nodebr.readLine())!=null){
				String[] arr = line.split("\t");
				for(int i=0;i<arr.length;i++){
					Node node = new Node(arr[0]);
					nodeList.add(node);
					nodeIDList.add(arr[0]);
				}
			}
			while((line = edgebr.readLine())!=null){
				String[] arr = line.split("\t");
				for(int i=0;i<arr.length;i++){
					Edge edge = new Edge(arr[0],arr[1]);
					edgeList.add(edge);
				}
			}
			nodebr.close();
			edgebr.close();
			Date end = Calendar.getInstance().getTime();
			double diff = (end.getTime() - start.getTime());
			System.out.println("loading time is :"+diff);
			System.out.println("-----------------read file finish-----------------");
			Node tempNode;
			int currentCount = 1;
			start = Calendar.getInstance().getTime();
			System.out.println("-----------------start to expansion-----------------");
			for(int nodePtr = 0; nodePtr < nodeList.size(); nodePtr++){
				tempNode = nodeList.get(nodePtr);
				this.expansion(tempNode, edgeList, currentCount, depth);
				partFile = new FileWriter(tempNode.getID()+".part");
				partFilebr = new BufferedWriter(partFile);
				this.write(tempNode, partFilebr, nodeIDList);
				partFilebr.close();
			}
			System.out.println("-----------------end for expansion-----------------");
			end = Calendar.getInstance().getTime();
			diff = (end.getTime() - start.getTime());
			System.out.println("expansion time is :"+diff);
		
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}catch (IOException e) {
			e.printStackTrace();
		}
  }
  
  public void expansion(Node target, ArrayList<Edge> edgeList, int currentCount, int depth){
	  Edge edge;
	  for(int edgePtr = 0; edgePtr < edgeList.size(); edgePtr++){
		  edge = edgeList.get(edgePtr);
			 if(edge.containNode(target) != null){
				 Node newNode = new Node(edge.containNode(target));
				 target.addNeighbors(newNode);
			 }
	  }
	 
	  if(currentCount >= depth){
		  return;
	  }
	  Node node;
	  if(target.getNeighbors().size() != 0 ){
		 for(int nodePtr = 0; nodePtr < target.getNeighbors().size(); nodePtr++){
			 node = (Node)target.getNeighbors().toArray()[nodePtr];
			 currentCount = currentCount + 1;
			 this.expansion(node, edgeList, currentCount, depth); 
			 currentCount = currentCount - 1;
		 }
		 
	  }
  }
  
  public void write(Node node,BufferedWriter partFilebr, ArrayList<String> nodeIDList){
	  try {
		  if(nodeIDList.contains(node.getID())){
				partFilebr.write(node.getID()+"\t"+"1"+"\t"+"0"+"\t"+"0"+"\t"+"0"+"\n");
			}
			else{
				partFilebr.write(node.getID()+"\t"+"0"+"\t"+"0"+"\t"+"0"+"\t"+"0"+"\n");
			}
		Iterator<Node> nodePtr = node.getNeighbors().iterator();
		Node nextNode;
		if(node.getNeighbors().size() > 1){
			while(nodePtr.hasNext()){
				nextNode = nodePtr.next();
				this.write(nextNode, partFilebr, nodeIDList);
				if(node.getID() != nextNode.getID()){
					if(nodeIDList.contains(nextNode.getID())){
						partFilebr.write(nextNode.getID()+"\t"+"1"+"\t"+"0"+"\t"+"0"+"\t"+"0"+"\n");
					}
					else{
						partFilebr.write(nextNode.getID()+"\t"+"0"+"\t"+"0"+"\t"+"0"+"\t"+"0"+"\n");
					}
				}
			}
		}
		else{
			return;
		}
		
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	  
	  
  }
  
  
  public static void main(String[] args){
	  GraphPartitioner partitioner = new GraphPartitioner();
	  partitioner.buildPartition(args[0],args[1],Integer.valueOf(args[2]));
  }
}
