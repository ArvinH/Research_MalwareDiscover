package netdb.graph.alg;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.TreeSet;

import netdb.graph.opts.framework.TargetVertex;
import netdb.graph.opts.framework.Walker;
import netdb.graph.unit.EdgesCollection;
import netdb.graph.unit.VerticesCollection;

import com.tinkerpop.blueprints.Direction;
import com.tinkerpop.blueprints.Edge;
import com.tinkerpop.blueprints.Vertex;
/**
 * 
 * @author arvin
 * KNN Search Strategy
 */
public class KNNSearch implements IGraphSearchStrategy{
	private TreeSet<TargetVertex> knnCandidate;
    private IGraphSearchVisitor Ivisitor;
    private ArrayList<Vertex> adjacentVertices;
    private ArrayList<Edge> EdgeList;
    private RandomProb RProb;
    private boolean hasNextNode = false;
    private int probthreshold = 0;
    private int Stepsthreshold = 0;
    private int K;
    public KNNSearch(int Stepsthreshold, int k){
    	knnCandidate = new TreeSet<TargetVertex>();
    	this.Stepsthreshold = Stepsthreshold;
    	adjacentVertices = new ArrayList<Vertex>();
    	EdgeList = new ArrayList<Edge>();
    	RProb = new RandomProb();
    	this.K = k;
    }
    
	public Vertex getNextVisitVertex(Vertex lastV, Walker walker) {
		// calculate the probability of walking to or not walking to v's neighbors
		// pick one v from lastV

		// collect all adjacent vertices and edges
		adjacentVertices.addAll(VerticesCollection.convert(lastV.getVertices(Direction.BOTH, "edge labels")));
		EdgeList.addAll(EdgesCollection.convert(lastV.getEdges(Direction.BOTH, "edge labels")));
		
		Iterator<Edge> edgePtr = EdgeList.iterator();
		double prob = 0.0;
		Edge e = null;
		while (edgePtr.hasNext()){
			e = edgePtr.next();
			Double weight = e.getProperty("weight");
			// here to decide which edge should be walked
			prob = RProb.calculate(weight);
			if(prob > probthreshold){
				
				Vertex vIn = e.getVertex(Direction.IN);
				Vertex vOut = e.getVertex(Direction.OUT);
				if(lastV.equals(vIn)){
					Ivisitor.visitVertex(vIn, null, walker);
				}
				else if(lastV.equals(vOut)){
					Ivisitor.visitVertex(vOut, null, walker);
				}
				hasNextNode = true;
			}
			else{
				// get another Vertex
				
				
			}
			
			
			
			if (!hasNextNode){  
				// no next node
				// return null?	
			}
		}
		return null;
	}
	public boolean targetCompare(Vertex v, ArrayList<TargetVertex> t){
	  	boolean compareResult = false;
	  	Iterator<TargetVertex> targetPtr = t.iterator();
	  	while(targetPtr.hasNext()){
	  		String targetType = (String)targetPtr.next().getProperty("type");
	  		if (targetType.equals(v.getProperty("type"))){
	  			compareResult = true;
	  		}
	  	}
	  	
	  	
	  	
	  	
	  return compareResult; 
  }
	public int getStepsThreshold(){
		return this.Stepsthreshold;
	}
	public void accept(IGraphSearchVisitor vis) {
		Ivisitor = vis;
		
	}

	@Override
	public boolean successOrNot() {
		// TODO Auto-generated method stub
		if(knnCandidate.size() == this.K){
			return true;
		}
		else{
			return false;
		}
	}


}
