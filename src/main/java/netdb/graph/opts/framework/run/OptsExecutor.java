package netdb.graph.opts.framework.run;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Properties;

import netdb.graph.alg.AccumateVisitor;
import netdb.graph.alg.KNNSearch;
import netdb.graph.opts.framework.IndexedGraph;
import netdb.graph.opts.framework.OptsExperimentSet;
import netdb.graph.opts.framework.TargetVertex;
import netdb.graph.opts.framework.Walker;

public class OptsExecutor {
	public OptsExecutor() {
    	Properties prop = new Properties();
    	try {
          prop.load(new FileInputStream("OptsProperties"));
          OptsExperimentSet.GRAPH_FILE = prop.getProperty("GRAPH_FILE");
          ArrayList<String> GraphPartIDList = new ArrayList<String>();
          String[] GraphPartIDListString = prop.getProperty("GRAPH_PARTID").split(",");
          for(String id : GraphPartIDListString){
        	  GraphPartIDList.add(id);
          }
          OptsExperimentSet.GRAPH_PARTID = GraphPartIDList;
          ArrayList<String> CachedGraphIDList = new ArrayList<String>();
          String[] cachedGraphIDListString = prop.getProperty("CACHE_GRAPHID").split(",");
          for(String id : cachedGraphIDListString){
        	  CachedGraphIDList.add(id);
          }
          OptsExperimentSet.CACHED_GRAPHID = CachedGraphIDList;
    	} catch (IOException e) {
    		
    	}	
	}
	public void run(ArrayList<String> queryNode){
		IndexedGraph iGraph = new IndexedGraph("/Volumes/MacintoshHDD/Users/arvin/Documents/neo4j-community-1.9.5/data/graph.db");
		IndexedGraph iGraph2 = new IndexedGraph("/Volumes/MacintoshHDD/Users/arvin/Documents/neo4j-community-1.9.5/data/graph2.db");
		KNNSearch knn = new KNNSearch(20,3);
		ArrayList<Walker> walkerList = new ArrayList<Walker>();
		ArrayList<TargetVertex> targetV = new ArrayList<TargetVertex>();
		AccumateVisitor AVisitor = new AccumateVisitor(targetV, 0.6);
		knn.accept(AVisitor);
		//walkerList = iGraph.query(targetV, knn, queryNode);
		//walkerList.get(0).getAllPath();
		iGraph.Test();
		iGraph2.Test();
	}
	public static void main(String[] agrs) {
		OptsExecutor optsExec = new OptsExecutor();
		ArrayList<String> queryNodeList = new ArrayList<String>();
		queryNodeList.add(" ");
		optsExec.run(queryNodeList);
	}
}
