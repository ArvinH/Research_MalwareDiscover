package netdb.database.opt;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Random;

import netdb.graph.opts.framework.run.OptsExecutor;

public class DatabaseOpts {
	private String address;
	private String user;
	private String password;
	private String driver;
	private Connection conn;
	public DatabaseOpts(String address, String databaseName, String user, String password){
		 this.driver = "org.postgresql.Driver"; 
	     this.address = "jdbc:postgresql://"+address+"/"+databaseName;
	     this.user = user; 
	     this.password = password; 
	     this.setConnection();
	}
	public String getPartID(String nodeID){
		String partIDList[] = null;
		String partID = null;
		String returnPartID = null;
		Statement stmt = null;
		try {
			stmt = this.conn.createStatement();
			ResultSet result = stmt.executeQuery(
         			"SELECT partID FROM nodeGraphHash where nodeID = \""+nodeID+"\"");
			 while(result.next()) { 
				 partID = result.getString("partID"); 
			    }
			 partIDList = partID.split(",");
			 if(partIDList.length > 0){
				  Random rand = new Random();
				  returnPartID = partIDList[rand.nextInt(partIDList.length)];
			 }
			 else{
				 returnPartID = partID;
			 }
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally{
            try {
				this.conn.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		
		return returnPartID;
	}
	public String checkBorderMap(String nodeID, String ori_partID){
		 Statement stmt = null;
		 String subgraphPart = null;
		 String[] subgraphPartList = null;
		 String graphPartNeedLoad = null;
		 try {
			 stmt = this.conn.createStatement();
			 ResultSet result = stmt.executeQuery(
                     			"SELECT subgraphID FROM borderMap where borderID = \""+nodeID+"\"");
			 while(result.next()) { 
	                subgraphPart = result.getString("subgraphID"); 
	            }
			 subgraphPartList = subgraphPart.split(",");
			 Random rand = new Random();
			 graphPartNeedLoad = subgraphPartList[rand.nextInt(subgraphPartList.length)];
			 if(subgraphPartList.length == 1 || subgraphPartList.length == 0){
				 graphPartNeedLoad = "-1";
			 }
			 else{
				 while(ori_partID.equals(graphPartNeedLoad)){
					 graphPartNeedLoad = subgraphPartList[rand.nextInt(subgraphPartList.length)];
				 }
			 }
			 
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally{
            try {
				this.conn.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return graphPartNeedLoad;
	}
	
	private void setConnection(){
		
		try { 
            Class.forName(this.driver); 
            this.conn = 
               DriverManager.getConnection(this.address, 
                                  this.user, this.password);
 
            if(this.conn != null && !this.conn.isClosed()) {
                System.out.println("connect successfully"); 
            }
            
        } 
        catch(ClassNotFoundException e) { 
            System.out.println("couldn't find the driver class"); 
            e.printStackTrace(); 
        } 
        catch(SQLException e) { 
            e.printStackTrace(); 
        } 
		
	}
	
	public void test(String nodeID){
		String partID = null;
		Statement stmt = null;
		try {
			stmt = this.conn.createStatement();
			ResultSet result = stmt.executeQuery(
         			"SELECT partID FROM nodeGraphHash where nodeID = \""+nodeID+"\"");
			 while(result.next()) { 
				 partID = result.getString("partID"); 
			    }
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally{
            try {
				this.conn.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	public static void main(String[] agrs) {
		 DatabaseOpts databaseOpts = new DatabaseOpts("localhost:3306","graphPartition","root","155013");
		  databaseOpts.test("999");
	}
}
