package netdb.graph.opts.framework.run;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Properties;

import netdb.graph.alg.AccumulateVisitor;
import netdb.graph.alg.KNNSearch;
import netdb.graph.opts.framework.IndexedGraph;
import netdb.graph.opts.framework.OptsExperimentSet;

import com.tinkerpop.blueprints.Vertex;

public class OptsExecutor {
	public OptsExecutor() {
    	Properties prop = new Properties();
    	try {
          prop.load(new FileInputStream("/Volumes/MacintoshHDD/Users/arvin/git/Research_MalwareDiscover/src/main/java/netdb/graph/properties/config.properties"));
          
          String[] GraphPartIDListString = prop.getProperty("GRAPH_PARTID").split(",");
          OptsExperimentSet.GRAPH_PARTID = GraphPartIDListString;
          
          String[] cachedGraphIDListString = prop.getProperty("CACHE_GRAPHID").split(",");
          OptsExperimentSet.CACHED_GRAPHID = cachedGraphIDListString;
          
          String TargetType = prop.getProperty("TARGET_TYPE");
          OptsExperimentSet.TARGET_TYPE = TargetType;
          
          String knnStepsThreshold = prop.getProperty("KNN_STEPS_THRESHOLD");
          OptsExperimentSet.KNN_STEPS_THRESHOLD = Integer.parseInt(knnStepsThreshold);
          
          String knn_k = prop.getProperty("KNN_k");
          OptsExperimentSet.KNN_k = Integer.parseInt(knn_k);
          
          String boundary_threshold = prop.getProperty("BOUNDARY_THRESHOLD");
          OptsExperimentSet.BOUNDARY_THRESHOLD = Double.parseDouble(boundary_threshold);
          
          String sliding_windowsize = prop.getProperty("SLIDING_WINDOWSIZE");
          OptsExperimentSet.SLIDING_WINDOWSIZE = Integer.parseInt(sliding_windowsize);
          
          String[] targetList = prop.getProperty("TARGET_VERTEXID").split(",");
          OptsExperimentSet.TARGET_LIST = targetList;
          
    	} catch (IOException e) {
    		e.printStackTrace();
    	}	
	}
	public void run(HashMap<String,String> queryNode){
		IndexedGraph iGraph = new IndexedGraph("0");
		KNNSearch knn = new KNNSearch(OptsExperimentSet.KNN_STEPS_THRESHOLD,OptsExperimentSet.KNN_k,OptsExperimentSet.BOUNDARY_THRESHOLD);
		AccumulateVisitor AVisitor = new AccumulateVisitor(OptsExperimentSet.TARGET_TYPE, OptsExperimentSet.SLIDING_WINDOWSIZE);
		knn.accept(AVisitor);
		
		HashSet<Vertex> result = iGraph.query(knn, queryNode);
		if(result.size() != 0){
			for(Vertex i : result){
				System.out.println(i.getProperty("nodeID")+","+i.getProperty("count"));
			}
		}
		else{
			System.out.println("no target catched in these perids of time!");
		}
		iGraph.CleanCache();
	}
	public static void main(String[] agrs) {
		OptsExecutor optsExec = new OptsExecutor();
		HashMap<String,String> queryNodeList = new HashMap<String,String>();
		String prefixfileName = "/Volumes/MacintoshHDD/Users/arvin/Dropbox/Research/batch-import/ResearchSyntheticData/syntheticData/";
		String fileName = prefixfileName + "queryList5.csv";
		int i = 0;
		try {
			FileReader fr = new FileReader(fileName);
			BufferedReader br = new BufferedReader(fr);
			String line;
			while((line = br.readLine())!=null){
					System.out.println(line);
					queryNodeList.put(String.valueOf(i),line+"_2014-01-21 09:54:26");
					i = i + 1;
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}catch (IOException e) {
			e.printStackTrace();
		}
		
		Date startTime = Calendar.getInstance().getTime();
		optsExec.run(queryNodeList);
		Date currentTime = Calendar.getInstance().getTime();
		long diff = (currentTime.getTime() - startTime.getTime()) / 1000;
		System.out.println("Total time: "+diff);
	}
}
