'''
@author ArvinH
@date 2014/05/21

'''
import sys
import postgresql
import random
import pdb
import json



class partition:
    def __init__(self):
        self.node = dict()
        db_str = open('db_setting.json')
        self.db_setting = json.load(db_str)
        db_str.close()

    def run(self,edgefile):
        db = postgresql.open(user = self.db_setting['user'],\
                             password = self.db_setting['password'],\
                             host = self.db_setting['host'],\
                             database = self.db_setting['database'],\
                             port = self.db_setting['port'])
        i = 0
        try:
            with open(edgefile,'r',encoding='utf-8') as edgeFile:
                for line in edgeFile:
                    i = i + 1
                    if i%10000 == 0:
                        print(i)
                    data = line.strip().split('\t')
                    if data[0] == data[1]:
                        pass
                    else:
                        # for data[0]
                        if data[0] in self.node:
                            if data[0] == '':
                               print(line.strip())
                            self.node[data[0]].append(data[1])
                        else:
                            if data[0] == '':
                               print(line.strip())
                            self.node[data[0]] = [data[1]]
                        # for data[1]
                        if data[1] in self.node:
                            if data[1] == '':
                               print(line.strip())
                            self.node[data[1]].append(data[0])
                        else:
                            if data[1] == '':
                               print(line.strip())
                            self.node[data[1]] = [data[0]]

            insert_neighbor = db.prepare('insert into neighborMap values($1,$2,$3)')
            Datasets = []
            counter = 0
            for key in self.node:
                counter = counter + 1
                Datasets.append((key,','.join(self.node[key]),'0'))
                if counter%100000 == 0:
                    with db.xact():
                        insert_neighbor.load_rows(Datasets)
                    del Datasets[:]

            with db.xact():
                insert_neighbor.load_rows(Datasets)
        except:
            print("Unexpected error: "+','.join(sys.exc_info()))



def main ():
    edgefile = sys.argv[1]
    f = partition()
    f.run(edgefile)




if __name__ == '__main__' :
    main()
