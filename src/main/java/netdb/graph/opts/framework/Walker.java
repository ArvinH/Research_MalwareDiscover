package netdb.graph.opts.framework;

import java.util.Iterator;
import java.util.LinkedList;

import com.tinkerpop.blueprints.Edge;
import com.tinkerpop.blueprints.Vertex;
/**
 * 
 * @author arvin
 * Walker : record all nodes and edges it walks by.
 */
public class Walker {
  private LinkedList<Vertex> visitedNodes;
  private LinkedList<Edge> visitedEdges;
  
  public Walker() {
	  visitedNodes = new LinkedList<Vertex>();
	  visitedEdges = new LinkedList<Edge>();
  }
  
  public void addNode(Vertex v) {
	  visitedNodes.add(v);
	  
  }
  
  public void addEdge(Edge e) {
	  visitedEdges.add(e);
	  
  }
  
  public Vertex getLeastNode() {
	  return visitedNodes.getLast();
  }
  
  public String toString() {
	  StringBuffer strBuf = new StringBuffer();
	  Iterator<Vertex> vptr = visitedNodes.iterator();
	  while(vptr.hasNext()){
		  strBuf.append(vptr.next());
	  }
	  return strBuf.toString();
  }
  
  public LinkedList<Vertex> getPath(){
	  //return ALL Nodes
	  return visitedNodes;
  }
  
  public double getPathWeight() {
	  double weight = 0;
	  Iterator<Edge> eptr = visitedEdges.iterator();
	  while(eptr.hasNext()){
		  weight += (double)eptr.next().getProperty("weight");
	  }
	  return weight;
  }
}
